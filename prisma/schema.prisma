generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Article {
  id       String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  userId   String    @db.Char(36)
  title    String
  body     String    @db.Text
  time     DateTime  @db.DateTime(0)
  author   User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Article_ibfk_1")
  comments Comment[]

  @@index([userId], map: "userId")
}

model Session {
  id        String   @id @default(dbgenerated("(uuid())")) @db.Char(36)
  userId    String   @db.Char(36)
  expiresAt DateTime
  recovery  Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Session_ibfk_1")

  @@index([userId], map: "userId")
}

model User {
  id               String            @id @default(dbgenerated("(uuid())")) @db.Char(36)
  email            String            @unique(map: "email")
  role             User_role
  name             String
  image            String?           @db.Text
  bio              String?           @db.Text
  mailingList      Boolean           @default(false)
  createdAt        DateTime          @default(now()) @db.Timestamp(0)
  accessedAt       DateTime          @default(now()) @db.Timestamp(0)
  accounts         Account?
  articles         Article[]
  comments         Comment[]
  resetToken       ResetToken?
  sessions         Session[]
  verificationCode VerificationCode?
}

model Comment {
  id        String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  articleId String    @db.Char(36)
  userId    String    @db.Char(36)
  replyId   String?   @db.Char(36)
  body      String    @db.Text
  time      DateTime
  article   Article   @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Comment_ibfk_1")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Comment_ibfk_2")
  parent    Comment?  @relation("CommentToComment", fields: [replyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Comment_ibfk_3")
  children  Comment[] @relation("CommentToComment")

  @@index([articleId], map: "articleId")
  @@index([replyId], map: "replyId")
  @@index([userId], map: "userId")
}

model ResetToken {
  userId    String   @unique(map: "userId") @db.Char(36)
  token     String   @db.Char(60)
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ResetToken_ibfk_1")
}

model VerificationCode {
  userId    String   @unique(map: "userId") @db.Char(36)
  code      Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "VerificationCode_ibfk_1")
}

model Account {
  id           String           @id @default(dbgenerated("(uuid())")) @db.Char(36)
  provider     Account_provider
  userId       String           @unique(map: "userId")
  passwordHash String?          @db.Char(60)
  isPrimary    Boolean
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Account_ibfk_1")
}

enum Account_provider {
  credentials
  google
}

enum User_role {
  unverified
  verified
  subscriber
  editor
  admin
}
